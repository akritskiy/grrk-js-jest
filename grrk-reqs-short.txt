Basic system requirements:
   1. All items have a SellIn value which denotes the number of days we have to sell the item
   2. All items have a Quality value which denotes how valuable the item is
   3. At the end of each day our system lowers both values (referring to sellIn and quality) for every item. (Note: DK had an idea to add a param to the UpdateQuality method so that the increase/decrease amount is not hard-coded into the system and can be changed. This needs to be discussed with the team before we write more tests.)

Exceptions:
   4. Once the sell by date has passed, Quality degrades twice as fast
   5. The Quality of an item is never negative
   6. "Aged Brie" actually increases in Quality the older it gets
   7. The Quality of an item is never more than 50
   8. "Sulfuras", being a legendary item, never has to be sold or decreases in Quality
   9. "Backstage passes", like aged brie, increases in Quality as its SellIn value approaches; Quality increases by 2 when there are 10 days or less and by 3 when there are 5 days or less, but the Quality drops to 0 after the concert.
   10. An item can never have its Quality increase above 50.
   11. "Sulfuras" is a legendary item and as such its Quality is 80 and it never alters.

Conjured:
   We have recently signed a supplier of conjured items. This requires an update to our system:
   12. "Conjured" items degrade in Quality twice as fast as normal items

Constraints:
   C1. The team can add new code.
   C2. The team can make changes to the UpdateQuality method.
   C3. The team cannot alter the Item class.
   C4. The team cannot alter the items property (I'm assuming this refers to the items property in the shop class).
   
   "...as those belong to the goblin in the corner who will insta-rage and one-shot you as he doesn't believe in shared code ownership..."